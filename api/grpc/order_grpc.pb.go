// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/grpc/order.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trading_SubmitOrder_FullMethodName       = "/aeromatch.Trading/SubmitOrder"
	Trading_SubmitOrderStream_FullMethodName = "/aeromatch.Trading/SubmitOrderStream"
	Trading_GetOrderBook_FullMethodName      = "/aeromatch.Trading/GetOrderBook"
	Trading_MarketDataStream_FullMethodName  = "/aeromatch.Trading/MarketDataStream"
)

// TradingClient is the client API for Trading service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingClient interface {
	SubmitOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	SubmitOrderStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OrderRequest, OrderResponse], error)
	GetOrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error)
	MarketDataStream(ctx context.Context, in *MarketDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarketDataUpdate], error)
}

type tradingClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingClient(cc grpc.ClientConnInterface) TradingClient {
	return &tradingClient{cc}
}

func (c *tradingClient) SubmitOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, Trading_SubmitOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) SubmitOrderStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OrderRequest, OrderResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Trading_ServiceDesc.Streams[0], Trading_SubmitOrderStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrderRequest, OrderResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trading_SubmitOrderStreamClient = grpc.BidiStreamingClient[OrderRequest, OrderResponse]

func (c *tradingClient) GetOrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderBookResponse)
	err := c.cc.Invoke(ctx, Trading_GetOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) MarketDataStream(ctx context.Context, in *MarketDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarketDataUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Trading_ServiceDesc.Streams[1], Trading_MarketDataStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MarketDataRequest, MarketDataUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trading_MarketDataStreamClient = grpc.ServerStreamingClient[MarketDataUpdate]

// TradingServer is the server API for Trading service.
// All implementations must embed UnimplementedTradingServer
// for forward compatibility.
type TradingServer interface {
	SubmitOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	SubmitOrderStream(grpc.BidiStreamingServer[OrderRequest, OrderResponse]) error
	GetOrderBook(context.Context, *OrderBookRequest) (*OrderBookResponse, error)
	MarketDataStream(*MarketDataRequest, grpc.ServerStreamingServer[MarketDataUpdate]) error
	mustEmbedUnimplementedTradingServer()
}

// UnimplementedTradingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradingServer struct{}

func (UnimplementedTradingServer) SubmitOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}
func (UnimplementedTradingServer) SubmitOrderStream(grpc.BidiStreamingServer[OrderRequest, OrderResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubmitOrderStream not implemented")
}
func (UnimplementedTradingServer) GetOrderBook(context.Context, *OrderBookRequest) (*OrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBook not implemented")
}
func (UnimplementedTradingServer) MarketDataStream(*MarketDataRequest, grpc.ServerStreamingServer[MarketDataUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method MarketDataStream not implemented")
}
func (UnimplementedTradingServer) mustEmbedUnimplementedTradingServer() {}
func (UnimplementedTradingServer) testEmbeddedByValue()                 {}

// UnsafeTradingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingServer will
// result in compilation errors.
type UnsafeTradingServer interface {
	mustEmbedUnimplementedTradingServer()
}

func RegisterTradingServer(s grpc.ServiceRegistrar, srv TradingServer) {
	// If the following call pancis, it indicates UnimplementedTradingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trading_ServiceDesc, srv)
}

func _Trading_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trading_SubmitOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).SubmitOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_SubmitOrderStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradingServer).SubmitOrderStream(&grpc.GenericServerStream[OrderRequest, OrderResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trading_SubmitOrderStreamServer = grpc.BidiStreamingServer[OrderRequest, OrderResponse]

func _Trading_GetOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).GetOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trading_GetOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).GetOrderBook(ctx, req.(*OrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_MarketDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingServer).MarketDataStream(m, &grpc.GenericServerStream[MarketDataRequest, MarketDataUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trading_MarketDataStreamServer = grpc.ServerStreamingServer[MarketDataUpdate]

// Trading_ServiceDesc is the grpc.ServiceDesc for Trading service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trading_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aeromatch.Trading",
	HandlerType: (*TradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitOrder",
			Handler:    _Trading_SubmitOrder_Handler,
		},
		{
			MethodName: "GetOrderBook",
			Handler:    _Trading_GetOrderBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitOrderStream",
			Handler:       _Trading_SubmitOrderStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MarketDataStream",
			Handler:       _Trading_MarketDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/grpc/order.proto",
}
